buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
	baseName = 'soccerTeamMaker'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.projectlombok:lombok')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')

	compile('org.flywaydb:flyway-core')
	runtime('com.h2database:h2')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')

	// ObjectMapper
	compile 'org.modelmapper:modelmapper:0.7.3'

	// apache commons-lang
	compile 'org.apache.commons:commons-lang3:3.4'

	// QueryDSL
	compile "com.querydsl:querydsl-core:4.1.3";
	compile "com.querydsl:querydsl-apt:4.1.3";
	compile "com.querydsl:querydsl-jpa:4.1.3";
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

// setting QueryDSL
sourceSets {
	generated {
		java {
			srcDirs = ['generated/']
		}
	}
}

idea {
	module {
//		inheritOutputDirs = false
		sourceDirs += file('generated/')
//		generatedSourceDirs += file('generated/')
//		outputDir = file("$buildDir/classes/main/")
	}
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
	source = sourceSets.main.java
	classpath = configurations.compile
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

clean {
	delete sourceSets.generated.java.srcDirs
}

compileJava {
	dependsOn generateQueryDSL
	source generateQueryDSL.destinationDir
}

compileGeneratedJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

//tasks.compileJava.dependsOn clean, processResources, generateQueryDSL